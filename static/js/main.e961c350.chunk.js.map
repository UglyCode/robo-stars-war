{"version":3,"sources":["components/DecriptionRow.js","components/Card.js","components/CardList.js","components/Searchbox.js","components/AmountBox.js","components/Scroll.js","containers/Robots.js","components/BackBtn.js","components/Post.js","components/PostList.js","containers/Posts.js","containers/App.js","serviceWorker.js","index.js"],"names":["DescriptionRow","_ref","name","value","react_default","a","createElement","className","replace","Card","description","id","cardClick","onClick","src","concat","alt","cellSpacing","Object","keys","map","keyName","DecriptionRow","key","CardList","robots","elem","i","components_Card","height","Searchbox","searchChange","type","placeholder","onChange","AmountBox","amountChange","amount","min","max","Scroll","props","style","overflowY","border","children","Robots","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","onAmountChange","cardsAmount","_updateSwapiUsers","state","swapiUsersCache","actualRobots","Math","fetchArr","cacheLength","length","push","fetch","Promise","all","swapiArr","json","forEach","slice","_this$state","filteredRobo","filter","robo","toLowerCase","includes","components_Searchbox","components_AmountBox","components_Scroll","components_CardList","Component","BackBtn","href","Post","postText","postTitle","PostList","posts","components_Post","body","title","Posts","postsCache","extendCommentsPosts","currentRobotObj","undefined","_this2","getPosts","getInfo","Number","currentRobot","then","makeRobotObj","res","robotId","swapiObject","filteredObject","mass","hair_color","skin_color","eye_color","birth_year","gender","userAdtapedId","currPosts","userId","components_BackBtn","backOnClick","components_PostList","App","cardOnClick","currentTarget","currentPage","containers_Posts","containers_Robots","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e961c350.chunk.js","sourcesContent":["import React, {components} from 'react';\r\n\r\nconst DescriptionRow = ({name, value}) => {\r\n\r\n    return(\r\n        <tr className=\"stripe-dark\">\r\n            <td className=\"pa1\">{name.replace('_',' ')+':'}</td>\r\n            <td className=\"pa1\">{value}</td>\r\n        </tr>\r\n    )\r\n};\r\n\r\nexport default DescriptionRow;","import React, {components} from 'react';\r\nimport Description from './DecriptionRow';\r\n\r\nconst Card = ({name, description, id, cardClick}) => {\r\n\r\n    return (\r\n\r\n        <div\r\n            className='bg-light-blue dib br3 pa3 ma2 grow bw-2 shadow-5-l tc'\r\n            onClick={cardClick}\r\n            id={id}\r\n        >\r\n            <img src = {`https://robohash.org/${id}?size=200x200`} alt = 'robots'/>\r\n            <div>\r\n                <h3>{name}</h3>\r\n                <table className=\"f6 w-100 mw8 center\" cellSpacing=\"0\">\r\n                    <thead>\r\n                {\r\n                    Object.keys(description).map(keyName => {\r\n                        return <Description key={id+'/'+keyName} name={keyName} value={description[keyName]}/>\r\n                    })\r\n                }\r\n                    </thead>\r\n                </table>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n\r\n};\r\n    export default Card;","import React from 'react';\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({robots, cardClick})=>{\r\n\r\n    return(\r\n    <div>\r\n        {\r\n            robots.map((elem, i) => {\r\n                return (\r\n                    <Card\r\n                        key={i}\r\n                        id={i}\r\n                        name={elem.name}\r\n                        description={{height: elem.height}}\r\n                        cardClick={cardClick}\r\n                    /> //\r\n                );\r\n            })\r\n        }\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Searchbox = ({searchChange})=> {\r\n    return (\r\n        <div className='dib pa2'>\r\n        <input\r\n            className='pa3 ba b--yellow bg-lightest-blue'\r\n            type='search'\r\n            placeholder='search your robots'\r\n            onChange={searchChange}\r\n        />\r\n        </div>\r\n    );\r\n};\r\n\r\n    export default Searchbox;","import React from 'react';\r\n\r\nconst AmountBox = ({amountChange, amount}) => {\r\n    return(\r\n        <div className='dib pa2'>\r\n        <input\r\n            className='pa3 ba b--yellow bg-lightest-blue'\r\n            type='number'\r\n            value = {amount}\r\n            onChange={amountChange}\r\n            min = '5'\r\n            max = '25'\r\n        />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AmountBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid yellow', height: 'calc(100vh - 210px)'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from \"../components/CardList\";\r\nimport Searchbox from '../components/Searchbox';\r\nimport AmountBox from '../components/AmountBox';\r\nimport Scroll from '../components/Scroll'\r\n\r\nclass Robots extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            swapiUsersCache: [],\r\n            actualRobots: [],\r\n            searchfield: '',\r\n            cardsAmount: 10\r\n        }\r\n    }\r\n\r\n    async _updateSwapiUsers(amount){\r\n        const cardsAmount = Math.min(Math.max(amount, 5),25);\r\n        const {swapiUsersCache} = this.state;\r\n\r\n        let fetchArr =[];\r\n        const cacheLength = swapiUsersCache.length;\r\n\r\n        if (cacheLength < cardsAmount) {\r\n\r\n            for (let i = cacheLength; i < cardsAmount; i++){\r\n                fetchArr.push(fetch(`https://swapi.co/api/people/${i+1}`)); //0 elem not defined at wsapi\r\n            }\r\n\r\n            let swapiArr = await Promise.all(fetchArr);\r\n            swapiArr = await Promise.all(swapiArr.map( elem => elem.json()));\r\n            swapiArr.forEach(elem => swapiUsersCache.push(elem));\r\n\r\n            this.setState({ swapiUsersCache: swapiUsersCache});\r\n        }\r\n\r\n        this.setState({actualRobots: swapiUsersCache.slice(0,cardsAmount)});\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        this._updateSwapiUsers(this.state.cardsAmount);\r\n\r\n        // fetch('https://jsonplaceholder.typicode.com/users')\r\n        //     .then(response => response.json())\r\n        //     .then(users => this.setState({robots: users}));\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value});\r\n    };\r\n\r\n    onAmountChange = (event) => {\r\n        const amount = event.target.value;\r\n        this.setState({cardsAmount: amount});\r\n        this._updateSwapiUsers(amount);\r\n    };\r\n\r\n\r\n    render() {\r\n        const {actualRobots, searchfield, cardsAmount}  = this.state;\r\n        const filteredRobo = actualRobots.filter(robo => {\r\n            return robo.name && robo.name.toLowerCase().includes(searchfield)\r\n        });\r\n        if (!actualRobots.length){\r\n            return <h1 className='tc'>Loading</h1>\r\n        }\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <Searchbox searchChange={this.onSearchChange}/>\r\n                    <AmountBox amountChange={this.onAmountChange} amount={cardsAmount}/>\r\n                </div>\r\n                <Scroll>\r\n                    <CardList robots={filteredRobo} cardClick={this.props.cardClick}/>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\n\r\nexport default Robots;","import React from 'react';\r\n\r\nconst BackBtn = ({onClick}) => {\r\n\r\n    return(\r\n        <div>\r\n            <a className=\"f6 link dim br3 ba bw1 ph3 pv2 mb2 dib yellow\"\r\n                href=\"#0\"\r\n                onClick={onClick}\r\n            >Back to card list</a>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default BackBtn;","import React from 'react';\r\n\r\nconst Post = ({postText, postTitle}) => {\r\n\r\n    return(\r\n        <div className='bg-light-blue pa2 ma2'>\r\n            <p className='b tl pa0 ma0'>{postTitle}</p>\r\n            <p className='tl pa0 ma0 i'>{postText}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport Post from \"./Post\";\r\n\r\nconst PostList = ({posts})=>{\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                posts.map((elem) => {\r\n                    return <Post postText={elem.body} postTitle={elem.title}/>\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostList;","import React, {Component} from 'react';\r\nimport BackBtn from '../components/BackBtn';\r\nimport Card from '../components/Card';\r\nimport Scroll from '../components/Scroll';\r\nimport PostList from '../components/PostList';\r\n//TODO: add comments that expanding from posts, add buttons Prev(robot) & Next(robot) around Back button.\r\n\r\nclass Posts extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            postsCache: [],\r\n            // commentsCache: [],\r\n            extendCommentsPosts: [],\r\n            currentRobotObj: undefined\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        Promise.all([\r\n            this.getPosts(),\r\n            // this.getComments(),\r\n            this.getInfo(Number(this.props.currentRobot)+1)\r\n        ]).then(fetchArr => this.setState({\r\n            postsCache: fetchArr[0],\r\n            // commentsCache: fetchArr[1],\r\n            currentRobotObj: this.makeRobotObj(fetchArr[1], this.props.currentRobot)\r\n            })\r\n        );\r\n\r\n    }\r\n\r\n    getPosts(){\r\n        return fetch('https://jsonplaceholder.typicode.com/posts').then(res => res.json());\r\n    }\r\n\r\n    // getComments(){\r\n    //     return fetch('https://jsonplaceholder.typicode.com/comments').then(res => res.json());\r\n    // }\r\n\r\n    getInfo(robotId){\r\n        return fetch(`https://swapi.co/api/people/${robotId}`).then(res => res.json());\r\n    }\r\n\r\n    makeRobotObj(swapiObject, id){\r\n\r\n        let filteredObject = {\r\n            height: swapiObject.height,\r\n            mass: swapiObject.mass,\r\n            hair_color: swapiObject.hair_color,\r\n            skin_color: swapiObject.skin_color,\r\n            eye_color: swapiObject.eye_color,\r\n            birth_year: swapiObject.birth_year,\r\n            gender: swapiObject.gender\r\n        };\r\n\r\n        return {\r\n            id: id,\r\n            name: swapiObject.name,\r\n            description: filteredObject\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const {currentRobotObj, postsCache} = this.state;\r\n\r\n        if (!currentRobotObj) return <h1 className='tc'>Loading</h1>;\r\n\r\n        const userAdtapedId = (currentRobotObj.id+1)%10;\r\n        const currPosts = postsCache.filter(elem=>{\r\n            return (elem.userId === userAdtapedId);\r\n        });\r\n\r\n        return(\r\n            <div>\r\n                <BackBtn onClick={this.props.backOnClick}/>\r\n                <div>\r\n                    <div className='fl w-20 pa2'>\r\n                        <Card\r\n                            key={currentRobotObj.id}\r\n                            id={currentRobotObj.id}\r\n                            name={currentRobotObj.name}\r\n                            description={currentRobotObj.description}\r\n                            cardClick={undefined}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className='fl w-80 pa2'>\r\n                        <Scroll>\r\n                            <PostList posts={currPosts}/>\r\n                        </Scroll>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Posts;","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Robots from './Robots';\r\nimport Posts from './Posts';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentRobot: undefined\r\n        }\r\n    };\r\n\r\n    cardOnClick = (event) => {\r\n      this.setState({currentRobot: event.currentTarget.id});\r\n    };\r\n\r\n    backOnClick = () => {\r\n        this.setState({currentRobot: undefined});\r\n    };\r\n\r\n    render() {\r\n\r\n        let currentPage = this.state.currentRobot ?\r\n            <Posts backOnClick={this.backOnClick} currentRobot={this.state.currentRobot}/> :\r\n            <Robots cardClick={this.cardOnClick}/>;\r\n\r\n        return (\r\n            <div className='tc'>\r\n                <header><h1 className='f1'>ROBO-STARS WAR</h1></header>\r\n                {currentPage}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}